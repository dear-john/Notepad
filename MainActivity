package com.spring_ballet.notepad;

import android.Manifest;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.provider.MediaStore;
import android.support.annotation.NonNull;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.GridLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.support.v7.widget.Toolbar;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;

import org.litepal.crud.DataSupport;
import org.litepal.tablemanager.Connector;

import java.io.File;
import java.io.IOException;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import de.hdodenhof.circleimageview.CircleImageView;

public class MainActivity extends AppCompatActivity {

    private static final int TYPE_LOGIN = 1;
    private static final int TAKE_PHOTO = 2;
    private static final int CHOOSE_PHOTO = 3;
    private static final int TYPE_WRITE = 4;
    private static final int TYPE_UPDATE = 5;
    private static final int TYPE_ADD = 6;
    private static final int ORDER_TIME_UP = 1;
    private static final int ORDER_TIME_DOWN = 2;
    private static final int ORDER_LEVEL_UP = 3;
    private static final int ORDER_LEVEL_DOWN = 4;
    private static final int TYPE_SETTINGS = 11;
    private TextView tv_account;
    private TextView tv_mail;
    private Button bt_state;
    private static final String LOGIN = "登录";
    private static final String SIGN_OUT = "退出";
    private DrawerLayout drawerLayout;
    private CircleImageView circleImageView;
    private Uri photoUri;
    private MyAdapter adapter;
    private List<Note> noteList;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        NavigationView navigationView = (NavigationView) findViewById(R.id.navigationView);
        drawerLayout = (DrawerLayout) findViewById(R.id.drawerLayout);
        View headView = navigationView.getHeaderView(0);
        bt_state = headView.findViewById(R.id.bt_login);
        tv_mail = headView.findViewById(R.id.tv_mail);
        tv_account = headView.findViewById(R.id.tv_account);
        circleImageView = headView.findViewById(R.id.circleImageView);
        RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recyclerView);
        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);

        Connector.getDatabase();
        noteList = DataSupport.findAll(Note.class);
        if (noteList.isEmpty()) {
            noteList.add(new Note(0, "2017/9/18 14:31", "L1", "Welcome!"));
        }
        SharedPreferences preferences = getSharedPreferences("order_choice", 0);
        orderChoice(preferences.getInt("ORDER_CHOICE", ORDER_TIME_UP));
        adapter = new MyAdapter(noteList);
        GridLayoutManager manager = new GridLayoutManager(this, 2);
        recyclerView.setLayoutManager(manager);
        recyclerView.setAdapter(adapter);
        adapter.setOnAdapterListener(new MyAdapter.AdapterListener() {
            @Override
            public void onClick(View view, int position) {
                long key = noteList.get(position).getkey();
                Intent intent = new Intent(MainActivity.this, AddNoteActivity.class);
                intent.putExtra("method", TYPE_UPDATE);
                intent.putExtra("key", key);
                startActivityForResult(intent, TYPE_UPDATE);
                noteList.remove(position);
            }
        });
        setSupportActionBar(toolbar);
        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
//            actionBar.setDisplayHomeAsUpEnabled(true);
//            actionBar.setHomeAsUpIndicator(R.mipmap.menu);
            actionBar.setTitle("Notepad");
        }
        bt_state.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (bt_state.getText().equals(LOGIN)) {
                    Intent intent_login = new Intent(MainActivity.this, LoginActivity.class);
                    startActivityForResult(intent_login, TYPE_LOGIN);
                } else {
                    final AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                    builder.setTitle("确定退出?");
                    builder.setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialogInterface, int i) {
                            tv_mail.setText("");
                            bt_state.setText(LOGIN);
                            Toast.makeText(MainActivity.this, "已退出", Toast.LENGTH_SHORT).show();
                        }
                    });
                    builder.setNegativeButton("算了", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialogInterface, int i) {
                        }
                    });
                    builder.setCancelable(true);
                    builder.show();
                }
            }
        });
        circleImageView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                final AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                builder.setTitle("选择头像图片来源：");
                builder.setPositiveButton("本地图片", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        openAlbum();
                    }
                });
                builder.setNegativeButton("拍照", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        if (ContextCompat.checkSelfPermission(MainActivity.this,
                                Manifest.permission.WRITE_EXTERNAL_STORAGE)
                                != PackageManager.PERMISSION_GRANTED) {
                            ActivityCompat.requestPermissions(MainActivity.this, new String[]
                                    {Manifest.permission.WRITE_EXTERNAL_STORAGE}, TYPE_WRITE);
                        } else {
                            takePhoto();
                        }
                    }
                });
                builder.setCancelable(true);
                builder.show();
            }
        });
        navigationView.setItemIconTintList(null);
        navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                switch (item.getItemId()) {
                    case R.id.location:
                        Toast.makeText(MainActivity.this, "这个没想好!", Toast.LENGTH_SHORT).show();
                        break;
                    case R.id.friend:
                        Toast.makeText(MainActivity.this, "这个也没想好!", Toast.LENGTH_SHORT).show();
                        break;
                    case R.id.about:
                        Intent intent_about = new Intent(MainActivity.this, AboutMeActivity.class);
                        startActivity(intent_about);
                        break;
                    case R.id.more_info:
                        Toast.makeText(MainActivity.this, "没有更多啦!", Toast.LENGTH_SHORT).show();
                        break;
                    default:
                        break;
                }
                return true;
            }
        });
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(MainActivity.this, AddNoteActivity.class);
                intent.putExtra("method", TYPE_ADD);
                startActivityForResult(intent, TYPE_ADD);
            }
        });
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        switch (requestCode) {
            case TYPE_WRITE:
                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    takePhoto();
                }
                break;
            default:
                break;
        }
    }

    private void openAlbum() {
        Intent intent = new Intent(Intent.ACTION_PICK, null);
        intent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, "image/*");
        startActivityForResult(intent, CHOOSE_PHOTO);
    }

    private void takePhoto() {
        File photoFile = new File(getExternalCacheDir(), "photo.jpg");
        try {
            if (photoFile.exists()) {
                photoFile.delete();
            }
            photoFile.createNewFile();
        } catch (IOException e) {
            e.printStackTrace();
        }
        if (Build.VERSION.SDK_INT >= 24) {
            photoUri = FileProvider.getUriForFile(MainActivity.this, "com.spring_ballet.notepad", photoFile);
        } else {
            photoUri = Uri.fromFile(photoFile);
        }
        Intent intent = new Intent("android.media.action.IMAGE_CAPTURE");
        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoUri);
        startActivityForResult(intent, TAKE_PHOTO);
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode) {
            case TYPE_LOGIN:
                if (resultCode == RESULT_OK) {
                    tv_account.setText(data.getStringExtra("account"));
                    tv_mail.setText(data.getStringExtra("mail"));
                    bt_state.setText(SIGN_OUT);
                }
                break;
            case TAKE_PHOTO:
                if (resultCode == RESULT_OK) {
                    Glide.with(MainActivity.this).load(photoUri).into(circleImageView);
                }
                break;
            case CHOOSE_PHOTO:
                if (resultCode == RESULT_OK) {
                    if (data != null) {
                        Glide.with(MainActivity.this).load(data.getData()).into(circleImageView);
                    }
                }
                break;
            case TYPE_UPDATE:
            case TYPE_ADD:
                if (resultCode == RESULT_OK) {
                    long key = data.getLongExtra("key", -1);
                    if (key != -1) {
                        List<Note> notes = DataSupport.where("key = ?", key + "").find(Note.class);
                        noteList.add(notes.get(0));
                    }
                }
                adapter.notifyDataSetChanged();
                break;
            case TYPE_SETTINGS:
                if (resultCode == RESULT_OK) {
                    int choice = data.getIntExtra("order", -1);
                    if (choice != -1) {
                        SharedPreferences.Editor editor = getSharedPreferences("order_choice", 0).edit();
                        editor.putInt("ORDER_CHOICE", choice);
                        editor.apply();
                        orderChoice(choice);
                        adapter.notifyDataSetChanged();
                    }
                }
                break;
            default:
                break;
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                drawerLayout.openDrawer(GravityCompat.START);
                break;
            case R.id.settings:
                Intent intent0 = new Intent(MainActivity.this, SettingsActivity.class);
                startActivityForResult(intent0, TYPE_SETTINGS);
                break;
            case R.id.about:
                Intent intent = new Intent(MainActivity.this, AboutMeActivity.class);
                startActivity(intent);
                break;
            default:
                break;
        }
        return true;
    }

    private void orderChoice(int choice) {
        switch (choice) {
            case ORDER_TIME_UP:
                Collections.sort(noteList, new Comparator<Note>() {
                    @Override
                    public int compare(Note note, Note t1) {
                        if (note.getkey() > t1.getkey()) {
                            return 1;
                        } else if (note.getkey() < t1.getkey()) {
                            return -1;
                        } else {
                            return 0;
                        }
                    }
                });
                break;
            case ORDER_TIME_DOWN:
                Collections.sort(noteList, new Comparator<Note>() {
                    @Override
                    public int compare(Note note, Note t1) {
                        if (note.getkey() > t1.getkey()) {
                            return -1;
                        } else if (note.getkey() < t1.getkey()) {
                            return 1;
                        } else {
                            return 0;
                        }
                    }
                });
                break;
            case ORDER_LEVEL_UP:
                Collections.sort(noteList, new Comparator<Note>() {
                    @Override
                    public int compare(Note note, Note t1) {
                        return note.getLevel().compareTo(t1.getLevel());
                    }
                });
                break;
            case ORDER_LEVEL_DOWN:
                Collections.sort(noteList, new Comparator<Note>() {
                    @Override
                    public int compare(Note note, Note t1) {
                        return t1.getLevel().compareTo(note.getLevel());
                    }
                });
                break;
            default:
                break;
        }
    }
}
